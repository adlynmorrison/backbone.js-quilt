//Set up our namespace
var TileApp = window.TileApp || {};
	
	//create a new application view
TileApp.AppTile = Backbone.View.extend ({
	//boundries of the our application -it will
	//operate inside the element specified below
	el: $('#quilt-app'),
	
	//set up out event handlers
	events: {
		'click #create-tile': 'create_tile'
	},
	
	//automatically called when the app view is
	//instantiated
	initialize: function() {
		//reference the title list
		this.$tile_list = $('#tile-list');
		
		//get a reference to our form elements
		this.$form = $('#tile-form');
		this.$source = $('#source');
		this.$caption = $('#caption');
		this.$featured =  $('#featured');
		this.$order = $('#order');
		
		//get a reference too our stats elements
		this.$quilt_stats = $('#quilt-stats');
		this.$count_featured = $('#count-featured');
		this.$count_remaining = $('#count-remaining');
		
		//make this application view listen for tiles
		//added to out collection
		this.listenTo(TileApp.Tiles, 'add', this.add_tile);
		
		this.listenTo(TileApp.Tiles, 'remove', this.remove_tile);
		
		//listen for *Any* Change on the collection
		// and run the 'render_stats' function
		this.listenTo (TileApp.Tiles, 'all', this.render_stats)
		
		// get all existing tiles saved in localStorage
		// this 'fetch' call will work with localStorage
		// as well as URLS/APIs
		TileApp.Tiles.fetch();
	},
	
	//update featured and remaining counts at the top
	//of the form list
	render_stats: function(){
		//get the total number of tiles
		var tile_count = TileApp.Tiles.length;
		
		//get the number number of featured tiles
		var featured = TileApp.Tiles.featured().length;
		
		//update on the display
		this.$count_featured.text(featured);
		this.$count_remaining.text(6 - tile_count);
	},
	
	add_tile: function(tile){
		//empty tile list
		this.$tile_list.empty();
		
		// variable to hold the HTML generated by a view
    	var view;
		
		// Loop through the collection
    	TileApp.Tiles.each(function(tile) {
				
			//create and instance of the view
			view = new TileApp.TileView({ model: tile });
		
			this.$tile_list.append(view.render().el);
		
		}, this);
		
			if (TileApp.Tiles.length == 6) {
				$('#tile-form').slideUp('slow');
		};
	},
	
	remove_tile: function(tile){
		if (TileApp.Tiles.length < 6) {
				$('#tile-form').slideDown('slow');
		};
	},
		
	//handle clicks on #create-tile
	create_tile: function(e) {
		//reference the tile list
		e.preventDefault();
		
		var tile_values = {
			source: this.$source.val(),
			caption: this.$caption.val(),
			featured: this.$featured.is(':checked'),
			order: this.$order.val()
		};
		
		//add this new title to our collection
		TileApp.Tiles.create(tile_values);
		
		console.log(TileApp.Tile);
		
		//reset the form
		this.$form[0].reset();
		
	}

});
	
window.TileAppView = new TileApp.AppTile();